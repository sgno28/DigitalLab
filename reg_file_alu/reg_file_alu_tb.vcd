$date
	Wed Mar 09 14:38:13 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_alu_tb $end
$var wire 8 ! ALUResult [7:0] $end
$var reg 2 " ALUControl [1:0] $end
$var reg 1 # ALUSrc $end
$var reg 4 $ RA1 [3:0] $end
$var reg 4 % RA2 [3:0] $end
$var reg 1 & RegWrite $end
$var reg 4 ' WA [3:0] $end
$var reg 1 ( clk $end
$var reg 8 ) external_data_in [7:0] $end
$var reg 1 * reset $end
$scope module dut $end
$var wire 2 + ALUControl [1:0] $end
$var wire 1 # ALUSrc $end
$var wire 4 , RA1 [3:0] $end
$var wire 4 - RA2 [3:0] $end
$var wire 1 & RegWrite $end
$var wire 8 . SrcA [7:0] $end
$var wire 4 / WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 0 external_data_in [7:0] $end
$var wire 1 * reset $end
$var wire 8 1 RD2 [7:0] $end
$var wire 8 2 RD1 [7:0] $end
$var wire 8 3 ALUResult [7:0] $end
$var reg 8 4 SrcB [7:0] $end
$scope module alu $end
$var wire 2 5 ALUControl [1:0] $end
$var wire 8 6 a [7:0] $end
$var wire 8 7 b [7:0] $end
$var reg 8 8 ALUResult [7:0] $end
$upscope $end
$scope module reg_file $end
$var wire 4 9 RA1 [3:0] $end
$var wire 4 : RA2 [3:0] $end
$var wire 4 ; WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 < data_in [7:0] $end
$var wire 8 = data_out1 [7:0] $end
$var wire 8 > data_out2 [7:0] $end
$var wire 1 * reset $end
$var wire 1 & write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
1*
bx )
0(
bx '
x&
bx %
bx $
x#
bx "
bx !
$end
#10
0*
1(
#20
1&
0(
#30
b0 !
b0 3
b0 8
b0 <
b0 4
b0 7
b1 '
b1 /
b1 ;
b0 "
b0 +
b0 5
1#
b0 )
b0 0
1(
#40
bx1 !
bx1 3
bx1 8
bx1 <
b1 4
b1 7
b10 '
b10 /
b10 ;
b1 "
b1 +
b1 5
b1 )
b1 0
0(
#50
bx1xx !
bx1xx 3
bx1xx 8
bx1xx <
b100 4
b100 7
b100 '
b100 /
b100 ;
b100 )
b100 0
1(
#60
bx1x1 !
bx1x1 3
bx1x1 8
bx1x1 <
b101 4
b101 7
b101 '
b101 /
b101 ;
b101 )
b101 0
0(
#70
bx !
bx 3
bx 8
bx <
bx1 4
bx1 7
b11 "
b11 +
b11 5
0#
bx1 1
bx1 >
b100 %
b100 -
b100 :
b101 $
b101 ,
b101 9
0&
1(
