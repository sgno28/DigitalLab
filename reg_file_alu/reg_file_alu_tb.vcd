$date
	Fri Mar 11 18:33:17 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_alu_tb $end
$var wire 8 ! ALUResult [7:0] $end
$var reg 2 " ALUControl [1:0] $end
$var reg 1 # ALUSrc $end
$var reg 4 $ RA1 [3:0] $end
$var reg 4 % RA2 [3:0] $end
$var reg 1 & RegWrite $end
$var reg 4 ' WA [3:0] $end
$var reg 1 ( clk $end
$var reg 8 ) external_data_in [7:0] $end
$var reg 1 * reset $end
$scope module dut $end
$var wire 2 + ALUControl [1:0] $end
$var wire 1 # ALUSrc $end
$var wire 4 , RA1 [3:0] $end
$var wire 4 - RA2 [3:0] $end
$var wire 1 & RegWrite $end
$var wire 8 . SrcA [7:0] $end
$var wire 4 / WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 0 external_data_in [7:0] $end
$var wire 1 * reset $end
$var wire 8 1 RD2 [7:0] $end
$var wire 8 2 RD1 [7:0] $end
$var wire 8 3 ALUResult [7:0] $end
$var reg 8 4 SrcB [7:0] $end
$scope module alu $end
$var wire 2 5 ALUControl [1:0] $end
$var wire 8 6 a [7:0] $end
$var wire 8 7 b [7:0] $end
$var reg 8 8 ALUResult [7:0] $end
$upscope $end
$scope module reg_file $end
$var wire 4 9 RA1 [3:0] $end
$var wire 4 : RA2 [3:0] $end
$var wire 4 ; WA [3:0] $end
$var wire 1 ( clk $end
$var wire 8 < data_in [7:0] $end
$var wire 8 = data_out1 [7:0] $end
$var wire 8 > data_out2 [7:0] $end
$var wire 1 * reset $end
$var wire 1 & write_enable $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx >
bx =
bx <
b0 ;
b0 :
b0 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
b0 0
b0 /
bx .
b0 -
b0 ,
bx +
1*
b0 )
0(
b0 '
0&
b0 %
b0 $
x#
bx "
bx !
$end
#10
0*
1(
#20
0(
#25
1&
#30
1(
#40
0(
#45
b0 !
b0 3
b0 8
b0 <
b0 4
b0 7
b0 "
b0 +
b0 5
1#
b1 '
b1 /
b1 ;
#50
1(
#60
0(
#65
b1 !
b1 3
b1 8
b1 <
b1 4
b1 7
b1 "
b1 +
b1 5
b0 .
b0 6
b0 2
b0 =
b1 $
b1 ,
b1 9
b1 )
b1 0
b10 '
b10 /
b10 ;
#70
1(
#80
0(
#85
b101 !
b101 3
b101 8
b101 <
b101 4
b101 7
b101 )
b101 0
b101 '
b101 /
b101 ;
#90
1(
#100
0(
#105
b100 !
b100 3
b100 8
b100 <
b100 4
b100 7
b100 )
b100 0
b100 '
b100 /
b100 ;
#110
1(
#120
0(
#125
b11 !
b11 3
b11 8
b11 <
b11 4
b11 7
b11 )
b11 0
b11 '
b11 /
b11 ;
#130
1(
#140
0(
#145
b10 !
b10 3
b10 8
b10 <
b10 4
b10 7
b10 )
b10 0
b110 '
b110 /
b110 ;
#150
1(
#160
0(
#165
b1010 !
b1010 3
b1010 8
b1010 <
b1010 4
b1010 7
b1010 )
b1010 0
b111 '
b111 /
b111 ;
#170
1(
#180
0(
#185
b10100 !
b10100 3
b10100 8
b10100 <
b10100 4
b10100 7
b10100 )
b10100 0
b1001 '
b1001 /
b1001 ;
#190
1(
#200
0(
#205
b1111 !
b1111 3
b1111 8
b1111 <
b1111 4
b1111 7
b1111 )
b1111 0
b1010 '
b1010 /
b1010 ;
#210
1(
#220
0(
#225
b1000 !
b1000 3
b1000 8
b1000 <
b1000 4
b1000 7
b1000 )
b1000 0
b1011 '
b1011 /
b1011 ;
#230
1(
#240
0(
#245
0&
#250
1(
#260
0(
#265
b100 4
b100 7
b1001 !
b1001 3
b1001 8
b1001 <
b10 "
b10 +
b10 5
0#
b100 1
b100 >
b100 %
b100 -
b100 :
b101 .
b101 6
b101 2
b101 =
b101 $
b101 ,
b101 9
#270
1(
#280
0(
#285
b1 !
b1 3
b1 8
b1 <
b11 "
b11 +
b11 5
#290
1(
#300
0(
#305
b1 4
b1 7
b0 !
b0 3
b0 8
b0 <
b0 "
b0 +
b0 5
b1 1
b1 >
b10 %
b10 -
b10 :
b0 .
b0 6
b0 2
b0 =
b1 $
b1 ,
b1 9
#310
1(
#320
0(
#325
b1 !
b1 3
b1 8
b1 <
b1 "
b1 +
b1 5
#330
1(
#340
0(
#345
b10 4
b10 7
b101 !
b101 3
b101 8
b101 <
b10 "
b10 +
b10 5
b10 1
b10 >
b110 %
b110 -
b110 :
b11 .
b11 6
b11 2
b11 =
b11 $
b11 ,
b11 9
#350
1(
#360
0(
#365
b1 !
b1 3
b1 8
b1 <
b11 "
b11 +
b11 5
#370
1(
#380
0(
#385
b1010 4
b1010 7
b11110 !
b11110 3
b11110 8
b11110 <
b10 "
b10 +
b10 5
b1010 1
b1010 >
b111 %
b111 -
b111 :
b10100 .
b10100 6
b10100 2
b10100 =
b1001 $
b1001 ,
b1001 9
#390
1(
#400
0(
#405
b1010 !
b1010 3
b1010 8
b1010 <
b11 "
b11 +
b11 5
#410
1(
#420
0(
#425
b1000 4
b1000 7
b10111 !
b10111 3
b10111 8
b10111 <
b10 "
b10 +
b10 5
b1000 1
b1000 >
b1011 %
b1011 -
b1011 :
b1111 .
b1111 6
b1111 2
b1111 =
b1010 $
b1010 ,
b1010 9
#430
1(
#440
0(
#445
b111 !
b111 3
b111 8
b111 <
b11 "
b11 +
b11 5
#450
1(
#460
0(
#470
1(
#475
